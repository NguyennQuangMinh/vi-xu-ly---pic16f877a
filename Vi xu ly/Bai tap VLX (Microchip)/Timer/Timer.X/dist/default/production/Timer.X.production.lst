

Microchip MPLAB XC8 Assembler V2.30 build 20200825195618 
                                                                                               Tue Sep 08 17:46:58 2020

Microchip MPLAB XC8 C Compiler v2.30 (Free license) build 20200825195618 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.30
    24                           ; Generated 26/08/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F877A Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  0091                     	;# 
   103  0092                     	;# 
   104  0093                     	;# 
   105  0094                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  009F                     	;# 
   112  010C                     	;# 
   113  010D                     	;# 
   114  010E                     	;# 
   115  010F                     	;# 
   116  018C                     	;# 
   117  018D                     	;# 
   118  0000                     	;# 
   119  0001                     	;# 
   120  0002                     	;# 
   121  0003                     	;# 
   122  0004                     	;# 
   123  0005                     	;# 
   124  0006                     	;# 
   125  0007                     	;# 
   126  0008                     	;# 
   127  0009                     	;# 
   128  000A                     	;# 
   129  000B                     	;# 
   130  000C                     	;# 
   131  000D                     	;# 
   132  000E                     	;# 
   133  000E                     	;# 
   134  000F                     	;# 
   135  0010                     	;# 
   136  0011                     	;# 
   137  0012                     	;# 
   138  0013                     	;# 
   139  0014                     	;# 
   140  0015                     	;# 
   141  0015                     	;# 
   142  0016                     	;# 
   143  0017                     	;# 
   144  0018                     	;# 
   145  0019                     	;# 
   146  001A                     	;# 
   147  001B                     	;# 
   148  001B                     	;# 
   149  001C                     	;# 
   150  001D                     	;# 
   151  001E                     	;# 
   152  001F                     	;# 
   153  0081                     	;# 
   154  0085                     	;# 
   155  0086                     	;# 
   156  0087                     	;# 
   157  0088                     	;# 
   158  0089                     	;# 
   159  008C                     	;# 
   160  008D                     	;# 
   161  008E                     	;# 
   162  0091                     	;# 
   163  0092                     	;# 
   164  0093                     	;# 
   165  0094                     	;# 
   166  0098                     	;# 
   167  0099                     	;# 
   168  009C                     	;# 
   169  009D                     	;# 
   170  009E                     	;# 
   171  009F                     	;# 
   172  010C                     	;# 
   173  010D                     	;# 
   174  010E                     	;# 
   175  010F                     	;# 
   176  018C                     	;# 
   177  018D                     	;# 
   178                           
   179                           	psect	idataBANK0
   180  01E4                     __pidataBANK0:
   181                           
   182                           ;initializer for _number
   183  01E4  34C0               	retlw	192
   184  01E5  34F9               	retlw	249
   185  01E6  34A4               	retlw	164
   186  01E7  34B0               	retlw	176
   187  01E8  3499               	retlw	153
   188  01E9  3492               	retlw	146
   189  01EA  3482               	retlw	130
   190  01EB  34F8               	retlw	248
   191  01EC  3480               	retlw	128
   192  01ED  3490               	retlw	144
   193  0009                     _PORTEbits	set	9
   194  0007                     _PORTCbits	set	7
   195  0008                     _PORTD	set	8
   196  0061                     _TMR2IF	set	97
   197  005F                     _GIE	set	95
   198  005E                     _PEIE	set	94
   199  0092                     _TMR2ON	set	146
   200  0095                     _TOUTPS2	set	149
   201  0094                     _TOUTPS1	set	148
   202  0093                     _TOUTPS0	set	147
   203  0091                     _T2CKPS1	set	145
   204  0090                     _T2CKPS0	set	144
   205  0088                     _TRISD	set	136
   206  0087                     _TRISCbits	set	135
   207  0089                     _TRISEbits	set	137
   208  0085                     _TRISAbits	set	133
   209  0092                     _PR2	set	146
   210  0461                     _TMR2IE	set	1121
   211                           
   212                           	psect	cinit
   213  0011                     start_initialization:	
   214                           ; #config settings
   215                           
   216  0011                     __initialization:
   217                           
   218                           ; Initialize objects allocated to BANK0
   219  0011  1383               	bcf	3,7	;select IRP bank0
   220  0012  303E               	movlw	low (__pdataBANK0+10)
   221  0013  00FD               	movwf	btemp+-1
   222  0014  3001               	movlw	high __pidataBANK0
   223  0015  00FE               	movwf	btemp
   224  0016  30E4               	movlw	low __pidataBANK0
   225  0017  00FF               	movwf	btemp+1
   226  0018  3034               	movlw	low __pdataBANK0
   227  0019  0084               	movwf	4
   228  001A  120A  118A  21D7  120A  118A  	fcall	init_ram0
   229                           
   230                           ; Clear objects allocated to BANK0
   231  001F  3020               	movlw	low __pbssBANK0
   232  0020  0084               	movwf	4
   233  0021  3034               	movlw	low (__pbssBANK0+20)
   234  0022  120A  118A  21EE   	fcall	clear_ram0
   235                           
   236                           ; Clear objects allocated to COMMON
   237  0025  01FC               	clrf	__pbssCOMMON& (0+127)
   238  0026  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   239  0027                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242  0027                     __end_of__initialization:
   243  0027  0183               	clrf	3
   244  0028  120A  118A  29C1   	ljmp	_main	;jump to C main() function
   245                           
   246                           	psect	bssCOMMON
   247  007C                     __pbssCOMMON:
   248  007C                     _digit:
   249  007C                     	ds	1
   250  007D                     _bLed:
   251  007D                     	ds	1
   252                           
   253                           	psect	bssBANK0
   254  0020                     __pbssBANK0:
   255  0020                     _k:
   256  0020                     	ds	4
   257  0024                     _count_s:
   258  0024                     	ds	2
   259  0026                     _count:
   260  0026                     	ds	2
   261  0028                     _delay:
   262  0028                     	ds	2
   263  002A                     _j:
   264  002A                     	ds	2
   265  002C                     _num:
   266  002C                     	ds	2
   267  002E                     _i:
   268  002E                     	ds	2
   269  0030                     _ngin:
   270  0030                     	ds	1
   271  0031                     _tram:
   272  0031                     	ds	1
   273  0032                     _truc:
   274  0032                     	ds	1
   275  0033                     _donvi:
   276  0033                     	ds	1
   277                           
   278                           	psect	dataBANK0
   279  0034                     __pdataBANK0:
   280  0034                     _number:
   281  0034                     	ds	10
   282                           
   283                           	psect	inittext
   284  01D3                     init_fetch0:	
   285                           ;	Called with low address in FSR and high address in W
   286                           
   287  01D3  087E               	movf	126,w
   288  01D4  008A               	movwf	10
   289  01D5  087F               	movf	127,w
   290  01D6  0082               	movwf	2
   291  01D7                     init_ram0:	
   292                           ;Called with:
   293                           ;	high address of idata address in btemp 
   294                           ;	low address of idata address in btemp+1 
   295                           ;	low address of data in FSR
   296                           ;	high address + 1 of data in btemp-1
   297                           
   298  01D7  21D3  120A  118A   	fcall	init_fetch0
   299  01DA  0080               	movwf	0
   300  01DB  0A84               	incf	4,f
   301  01DC  0804               	movf	4,w
   302  01DD  067D               	xorwf	125,w
   303  01DE  1903               	btfsc	3,2
   304  01DF  3400               	retlw	0
   305  01E0  0AFF               	incf	127,f
   306  01E1  1903               	btfsc	3,2
   307  01E2  0AFE               	incf	126,f
   308  01E3  29D7               	goto	init_ram0
   309                           
   310                           	psect	clrtext
   311  01EE                     clear_ram0:	
   312                           ;	Called with FSR containing the base address, and
   313                           ;	W with the last address+1
   314                           
   315  01EE  0064               	clrwdt	;clear the watchdog before getting into this loop
   316  01EF                     clrloop0:
   317  01EF  0180               	clrf	0	;clear RAM location pointed to by FSR
   318  01F0  0A84               	incf	4,f	;increment pointer
   319  01F1  0604               	xorwf	4,w	;XOR with final address
   320  01F2  1903               	btfsc	3,2	;have we reached the end yet?
   321  01F3  3400               	retlw	0	;all done for this memory range, return
   322  01F4  0604               	xorwf	4,w	;XOR again to restore value
   323  01F5  29EF               	goto	clrloop0	;do the next byte
   324                           
   325                           	psect	cstackCOMMON
   326  0070                     __pcstackCOMMON:
   327  0070                     ?_hienthi:
   328  0070                     ??_hienthi:	
   329                           ; 1 bytes @ 0x0
   330                           
   331  0070                     ?_timer2_initialize:	
   332                           ; 1 bytes @ 0x0
   333                           
   334  0070                     ?_Count_Up:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0070                     ?_main:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?___lwdiv:	
   341                           ; 2 bytes @ 0x0
   342                           
   343  0070                     ?___lwmod:	
   344                           ; 2 bytes @ 0x0
   345                           
   346  0070                     ___lwdiv@divisor:	
   347                           ; 2 bytes @ 0x0
   348                           
   349  0070                     ___lwmod@divisor:	
   350                           ; 2 bytes @ 0x0
   351                           
   352                           
   353                           ; 2 bytes @ 0x0
   354  0070                     	ds	2
   355  0072                     ___lwdiv@dividend:
   356  0072                     ___lwmod@dividend:	
   357                           ; 2 bytes @ 0x2
   358                           
   359                           
   360                           ; 2 bytes @ 0x2
   361  0072                     	ds	2
   362  0074                     ??___lwdiv:
   363  0074                     ??___lwmod:	
   364                           ; 1 bytes @ 0x4
   365                           
   366                           
   367                           ; 1 bytes @ 0x4
   368  0074                     	ds	1
   369  0075                     ___lwmod@counter:
   370  0075                     ___lwdiv@quotient:	
   371                           ; 1 bytes @ 0x5
   372                           
   373                           
   374                           ; 2 bytes @ 0x5
   375  0075                     	ds	2
   376  0077                     ___lwdiv@counter:
   377                           
   378                           ; 1 bytes @ 0x7
   379  0077                     	ds	1
   380  0078                     ??_Count_Up:
   381                           
   382                           ; 1 bytes @ 0x8
   383  0078                     	ds	4
   384                           
   385                           	psect	cstackBANK0
   386  0000                     __pcstackBANK0:
   387  0000                     ??_timer2_initialize:
   388  0000                     ??_main:	
   389                           ; 1 bytes @ 0x0
   390                           
   391                           
   392                           	psect	maintext
   393  01C1                     __pmaintext:	
   394                           ; 1 bytes @ 0x0
   395 ;;
   396 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   397 ;;
   398 ;; *************** function _main *****************
   399 ;; Defined at:
   400 ;;		line 133 in file "Led_7seg.c"
   401 ;; Parameters:    Size  Location     Type
   402 ;;		None
   403 ;; Auto vars:     Size  Location     Type
   404 ;;		None
   405 ;; Return value:  Size  Location     Type
   406 ;;                  2   92[None  ] int 
   407 ;; Registers used:
   408 ;;		wreg, status,2, status,0, pclath, cstack
   409 ;; Tracked objects:
   410 ;;		On entry : B00/0
   411 ;;		On exit  : 0/0
   412 ;;		Unchanged: 0/0
   413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   414 ;;      Params:         0       0       0       0       0
   415 ;;      Locals:         0       0       0       0       0
   416 ;;      Temps:          0       0       0       0       0
   417 ;;      Totals:         0       0       0       0       0
   418 ;;Total ram usage:        0 bytes
   419 ;; Hardware stack levels required when called:    3
   420 ;; This function calls:
   421 ;;		_timer2_initialize
   422 ;; This function is called by:
   423 ;;		Startup code after reset
   424 ;; This function uses a non-reentrant model
   425 ;;
   426                           
   427                           
   428                           ;psect for function _main
   429  01C1                     _main:
   430                           
   431                           ;Led_7seg.c: 135:     TRISAbits.TRISA2=1;
   432                           
   433                           ;incstack = 0
   434                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   435  01C1  1683               	bsf	3,5	;RP0=1, select bank1
   436  01C2  1303               	bcf	3,6	;RP1=0, select bank1
   437  01C3  1505               	bsf	5,2	;volatile
   438                           
   439                           ;Led_7seg.c: 136:     TRISAbits.TRISA3=1;
   440  01C4  1585               	bsf	5,3	;volatile
   441                           
   442                           ;Led_7seg.c: 137:     TRISAbits.TRISA4=1;
   443  01C5  1605               	bsf	5,4	;volatile
   444                           
   445                           ;Led_7seg.c: 138:     TRISAbits.TRISA5=1 ;
   446  01C6  1685               	bsf	5,5	;volatile
   447                           
   448                           ;Led_7seg.c: 139:     TRISEbits.TRISE2=0;
   449  01C7  1109               	bcf	9,2	;volatile
   450                           
   451                           ;Led_7seg.c: 140:     TRISCbits.TRISC4=0;
   452  01C8  1207               	bcf	7,4	;volatile
   453                           
   454                           ;Led_7seg.c: 141:     TRISCbits.TRISC5=0;
   455  01C9  1287               	bcf	7,5	;volatile
   456                           
   457                           ;Led_7seg.c: 142:     TRISCbits.TRISC6=0;
   458  01CA  1307               	bcf	7,6	;volatile
   459                           
   460                           ;Led_7seg.c: 143:     TRISCbits.TRISC7=0;
   461  01CB  1387               	bcf	7,7	;volatile
   462                           
   463                           ;Led_7seg.c: 144:     TRISD=0;
   464  01CC  0188               	clrf	8	;volatile
   465                           
   466                           ;Led_7seg.c: 146:     timer2_initialize ();
   467  01CD  120A  118A  21AC  120A  118A  	fcall	_timer2_initialize
   468  01D2                     l93:	
   469                           ;Led_7seg.c: 147:  while(1)
   470                           
   471                           
   472                           ;Led_7seg.c: 148:  {;Led_7seg.c: 160:       }
   473  01D2  29D2               	goto	l93
   474  01D3                     __end_of_main:
   475                           
   476                           	psect	text1
   477  01AC                     __ptext1:	
   478 ;; *************** function _timer2_initialize *****************
   479 ;; Defined at:
   480 ;;		line 79 in file "Led_7seg.c"
   481 ;; Parameters:    Size  Location     Type
   482 ;;		None
   483 ;; Auto vars:     Size  Location     Type
   484 ;;		None
   485 ;; Return value:  Size  Location     Type
   486 ;;                  1    wreg      void 
   487 ;; Registers used:
   488 ;;		wreg
   489 ;; Tracked objects:
   490 ;;		On entry : 0/0
   491 ;;		On exit  : 0/0
   492 ;;		Unchanged: 0/0
   493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   494 ;;      Params:         0       0       0       0       0
   495 ;;      Locals:         0       0       0       0       0
   496 ;;      Temps:          0       0       0       0       0
   497 ;;      Totals:         0       0       0       0       0
   498 ;;Total ram usage:        0 bytes
   499 ;; Hardware stack levels used:    1
   500 ;; Hardware stack levels required when called:    2
   501 ;; This function calls:
   502 ;;		Nothing
   503 ;; This function is called by:
   504 ;;		_main
   505 ;; This function uses a non-reentrant model
   506 ;;
   507                           
   508                           
   509                           ;psect for function _timer2_initialize
   510  01AC                     _timer2_initialize:
   511                           
   512                           ;Led_7seg.c: 81:     T2CKPS0=1;
   513                           
   514                           ;incstack = 0
   515                           ; Regs used in _timer2_initialize: [wreg]
   516  01AC  1283               	bcf	3,5	;RP0=0, select bank0
   517  01AD  1303               	bcf	3,6	;RP1=0, select bank0
   518  01AE  1412               	bsf	18,0	;volatile
   519                           
   520                           ;Led_7seg.c: 82:     T2CKPS1=0;
   521  01AF  1092               	bcf	18,1	;volatile
   522                           
   523                           ;Led_7seg.c: 83:     PR2=100;
   524  01B0  3064               	movlw	100
   525  01B1  1683               	bsf	3,5	;RP0=1, select bank1
   526  01B2  1303               	bcf	3,6	;RP1=0, select bank1
   527  01B3  0092               	movwf	18	;volatile
   528                           
   529                           ;Led_7seg.c: 84:     TOUTPS0=1;
   530  01B4  1283               	bcf	3,5	;RP0=0, select bank0
   531  01B5  1303               	bcf	3,6	;RP1=0, select bank0
   532  01B6  1592               	bsf	18,3	;volatile
   533                           
   534                           ;Led_7seg.c: 85:     TOUTPS1=1;
   535  01B7  1612               	bsf	18,4	;volatile
   536                           
   537                           ;Led_7seg.c: 86:     TOUTPS2=1;
   538  01B8  1692               	bsf	18,5	;volatile
   539                           
   540                           ;Led_7seg.c: 87:     TOUTPS2=1;
   541  01B9  1692               	bsf	18,5	;volatile
   542                           
   543                           ;Led_7seg.c: 88:     TMR2ON=1;
   544  01BA  1512               	bsf	18,2	;volatile
   545                           
   546                           ;Led_7seg.c: 89:     TMR2IE=1;
   547  01BB  1683               	bsf	3,5	;RP0=1, select bank1
   548  01BC  1303               	bcf	3,6	;RP1=0, select bank1
   549  01BD  148C               	bsf	12,1	;volatile
   550                           
   551                           ;Led_7seg.c: 90:     PEIE=1;
   552  01BE  170B               	bsf	11,6	;volatile
   553                           
   554                           ;Led_7seg.c: 91:     GIE=1;
   555  01BF  178B               	bsf	11,7	;volatile
   556  01C0  0008               	return
   557  01C1                     __end_of_timer2_initialize:
   558                           
   559                           	psect	text2
   560  002B                     __ptext2:	
   561 ;; *************** function _Count_Up *****************
   562 ;; Defined at:
   563 ;;		line 94 in file "Led_7seg.c"
   564 ;; Parameters:    Size  Location     Type
   565 ;;		None
   566 ;; Auto vars:     Size  Location     Type
   567 ;;		None
   568 ;; Return value:  Size  Location     Type
   569 ;;                  1    wreg      void 
   570 ;; Registers used:
   571 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   572 ;; Tracked objects:
   573 ;;		On entry : 0/0
   574 ;;		On exit  : 0/0
   575 ;;		Unchanged: 0/0
   576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   577 ;;      Params:         0       0       0       0       0
   578 ;;      Locals:         0       0       0       0       0
   579 ;;      Temps:          4       0       0       0       0
   580 ;;      Totals:         4       0       0       0       0
   581 ;;Total ram usage:        4 bytes
   582 ;; Hardware stack levels used:    1
   583 ;; Hardware stack levels required when called:    1
   584 ;; This function calls:
   585 ;;		___lwdiv
   586 ;;		___lwmod
   587 ;;		_hienthi
   588 ;; This function is called by:
   589 ;;		Interrupt level 1
   590 ;; This function uses a non-reentrant model
   591 ;;
   592                           
   593                           
   594                           ;psect for function _Count_Up
   595  002B                     _Count_Up:
   596                           
   597                           ;Led_7seg.c: 96: if (TMR2IE && TMR2IF)
   598  002B  1683               	bsf	3,5	;RP0=1, select bank1
   599  002C  1303               	bcf	3,6	;RP1=0, select bank1
   600  002D  1C8C               	btfss	12,1	;volatile
   601  002E  28ED               	goto	i1l88
   602  002F  1283               	bcf	3,5	;RP0=0, select bank0
   603  0030  1303               	bcf	3,6	;RP1=0, select bank0
   604  0031  1C8C               	btfss	12,1	;volatile
   605  0032  28ED               	goto	i1l88
   606                           
   607                           ;Led_7seg.c: 97: {;Led_7seg.c: 98:   TMR2IF=0;
   608  0033  108C               	bcf	12,1	;volatile
   609                           
   610                           ;Led_7seg.c: 99:     count++;
   611  0034  3001               	movlw	1
   612  0035  07A6               	addwf	_count,f
   613  0036  1803               	skipnc
   614  0037  0AA7               	incf	_count+1,f
   615  0038  3000               	movlw	0
   616  0039  07A7               	addwf	_count+1,f
   617                           
   618                           ;Led_7seg.c: 101:   if(count==5)
   619  003A  3005               	movlw	5
   620  003B  0626               	xorwf	_count,w
   621  003C  0427               	iorwf	_count+1,w
   622  003D  1D03               	btfss	3,2
   623  003E  28ED               	goto	i1l88
   624                           
   625                           ;Led_7seg.c: 102:   {;Led_7seg.c: 103:       count=0;
   626  003F  01A6               	clrf	_count
   627  0040  01A7               	clrf	_count+1
   628                           
   629                           ;Led_7seg.c: 104:       hienthi();
   630  0041  120A  118A  20F6  120A  118A  	fcall	_hienthi
   631                           
   632                           ;Led_7seg.c: 105:       digit++;
   633  0046  3001               	movlw	1
   634  0047  00F8               	movwf	??_Count_Up
   635  0048  0878               	movf	??_Count_Up,w
   636  0049  07FC               	addwf	_digit,f
   637                           
   638                           ;Led_7seg.c: 106:       if(digit==4)
   639  004A  3004               	movlw	4
   640  004B  067C               	xorwf	_digit,w
   641  004C  1903               	btfsc	3,2
   642                           
   643                           ;Led_7seg.c: 107:         digit=0;
   644  004D  01FC               	clrf	_digit
   645                           
   646                           ;Led_7seg.c: 108:       count_s++;
   647  004E  3001               	movlw	1
   648  004F  1283               	bcf	3,5	;RP0=0, select bank0
   649  0050  1303               	bcf	3,6	;RP1=0, select bank0
   650  0051  07A4               	addwf	_count_s,f
   651  0052  1803               	skipnc
   652  0053  0AA5               	incf	_count_s+1,f
   653  0054  3000               	movlw	0
   654  0055  07A5               	addwf	_count_s+1,f
   655                           
   656                           ;Led_7seg.c: 109:       if(count_s==250)
   657  0056  30FA               	movlw	250
   658  0057  0624               	xorwf	_count_s,w
   659  0058  0425               	iorwf	_count_s+1,w
   660  0059  1D03               	btfss	3,2
   661  005A  28DE               	goto	i1l915
   662                           
   663                           ;Led_7seg.c: 110:       {;Led_7seg.c: 111:           count_s=0;
   664  005B  01A4               	clrf	_count_s
   665  005C  01A5               	clrf	_count_s+1
   666                           
   667                           ;Led_7seg.c: 112:       num++;
   668  005D  3001               	movlw	1
   669  005E  07AC               	addwf	_num,f
   670  005F  1803               	skipnc
   671  0060  0AAD               	incf	_num+1,f
   672  0061  3000               	movlw	0
   673  0062  07AD               	addwf	_num+1,f
   674                           
   675                           ;Led_7seg.c: 114:        if(num==10000)
   676  0063  3010               	movlw	16
   677  0064  062C               	xorwf	_num,w
   678  0065  3027               	movlw	39
   679  0066  1903               	skipnz
   680  0067  062D               	xorwf	_num+1,w
   681  0068  1D03               	btfss	3,2
   682  0069  286C               	goto	i1l903
   683                           
   684                           ;Led_7seg.c: 115:          num=0;
   685  006A  01AC               	clrf	_num
   686  006B  01AD               	clrf	_num+1
   687  006C                     i1l903:
   688                           
   689                           ;Led_7seg.c: 117:       ngin=num/1000;
   690  006C  30E8               	movlw	232
   691  006D  00F0               	movwf	___lwdiv@divisor
   692  006E  3003               	movlw	3
   693  006F  00F1               	movwf	___lwdiv@divisor+1
   694  0070  082D               	movf	_num+1,w
   695  0071  00F3               	movwf	___lwdiv@dividend+1
   696  0072  082C               	movf	_num,w
   697  0073  00F2               	movwf	___lwdiv@dividend
   698  0074  120A  118A  213E  120A  118A  	fcall	___lwdiv
   699  0079  0870               	movf	?___lwdiv,w
   700  007A  00F8               	movwf	??_Count_Up
   701  007B  0878               	movf	??_Count_Up,w
   702  007C  1283               	bcf	3,5	;RP0=0, select bank0
   703  007D  1303               	bcf	3,6	;RP1=0, select bank0
   704  007E  00B0               	movwf	_ngin
   705                           
   706                           ;Led_7seg.c: 118:        j=num%1000;
   707  007F  30E8               	movlw	232
   708  0080  00F0               	movwf	___lwmod@divisor
   709  0081  3003               	movlw	3
   710  0082  00F1               	movwf	___lwmod@divisor+1
   711  0083  082D               	movf	_num+1,w
   712  0084  00F3               	movwf	___lwmod@dividend+1
   713  0085  082C               	movf	_num,w
   714  0086  00F2               	movwf	___lwmod@dividend
   715  0087  120A  118A  217A  120A  118A  	fcall	___lwmod
   716  008C  0871               	movf	?___lwmod+1,w
   717  008D  1283               	bcf	3,5	;RP0=0, select bank0
   718  008E  1303               	bcf	3,6	;RP1=0, select bank0
   719  008F  00AB               	movwf	_j+1
   720  0090  0870               	movf	?___lwmod,w
   721  0091  00AA               	movwf	_j
   722                           
   723                           ;Led_7seg.c: 119:         tram=j/100;
   724  0092  3064               	movlw	100
   725  0093  00F0               	movwf	___lwdiv@divisor
   726  0094  3000               	movlw	0
   727  0095  00F1               	movwf	___lwdiv@divisor+1
   728  0096  082B               	movf	_j+1,w
   729  0097  00F3               	movwf	___lwdiv@dividend+1
   730  0098  082A               	movf	_j,w
   731  0099  00F2               	movwf	___lwdiv@dividend
   732  009A  120A  118A  213E  120A  118A  	fcall	___lwdiv
   733  009F  0870               	movf	?___lwdiv,w
   734  00A0  00F8               	movwf	??_Count_Up
   735  00A1  0878               	movf	??_Count_Up,w
   736  00A2  1283               	bcf	3,5	;RP0=0, select bank0
   737  00A3  1303               	bcf	3,6	;RP1=0, select bank0
   738  00A4  00B1               	movwf	_tram
   739                           
   740                           ;Led_7seg.c: 120:     j=j%100;
   741  00A5  3064               	movlw	100
   742  00A6  00F0               	movwf	___lwmod@divisor
   743  00A7  3000               	movlw	0
   744  00A8  00F1               	movwf	___lwmod@divisor+1
   745  00A9  082B               	movf	_j+1,w
   746  00AA  00F3               	movwf	___lwmod@dividend+1
   747  00AB  082A               	movf	_j,w
   748  00AC  00F2               	movwf	___lwmod@dividend
   749  00AD  120A  118A  217A  120A  118A  	fcall	___lwmod
   750  00B2  0871               	movf	?___lwmod+1,w
   751  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   752  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   753  00B5  00AB               	movwf	_j+1
   754  00B6  0870               	movf	?___lwmod,w
   755  00B7  00AA               	movwf	_j
   756                           
   757                           ;Led_7seg.c: 121:        truc=j/10;
   758  00B8  300A               	movlw	10
   759  00B9  00F0               	movwf	___lwdiv@divisor
   760  00BA  3000               	movlw	0
   761  00BB  00F1               	movwf	___lwdiv@divisor+1
   762  00BC  082B               	movf	_j+1,w
   763  00BD  00F3               	movwf	___lwdiv@dividend+1
   764  00BE  082A               	movf	_j,w
   765  00BF  00F2               	movwf	___lwdiv@dividend
   766  00C0  120A  118A  213E  120A  118A  	fcall	___lwdiv
   767  00C5  0870               	movf	?___lwdiv,w
   768  00C6  00F8               	movwf	??_Count_Up
   769  00C7  0878               	movf	??_Count_Up,w
   770  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   771  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   772  00CA  00B2               	movwf	_truc
   773                           
   774                           ;Led_7seg.c: 122:        donvi=j%10;
   775  00CB  300A               	movlw	10
   776  00CC  00F0               	movwf	___lwmod@divisor
   777  00CD  3000               	movlw	0
   778  00CE  00F1               	movwf	___lwmod@divisor+1
   779  00CF  082B               	movf	_j+1,w
   780  00D0  00F3               	movwf	___lwmod@dividend+1
   781  00D1  082A               	movf	_j,w
   782  00D2  00F2               	movwf	___lwmod@dividend
   783  00D3  120A  118A  217A  120A  118A  	fcall	___lwmod
   784  00D8  0870               	movf	?___lwmod,w
   785  00D9  00F8               	movwf	??_Count_Up
   786  00DA  0878               	movf	??_Count_Up,w
   787  00DB  1283               	bcf	3,5	;RP0=0, select bank0
   788  00DC  1303               	bcf	3,6	;RP1=0, select bank0
   789  00DD  00B3               	movwf	_donvi
   790  00DE                     i1l915:
   791                           
   792                           ;Led_7seg.c: 124:    bLed=!bLed;
   793  00DE  087D               	movf	_bLed,w
   794  00DF  1D03               	btfss	3,2
   795  00E0  28E3               	goto	u42_20
   796  00E1  3001               	movlw	1
   797  00E2  28E4               	goto	u43_20
   798  00E3                     u42_20:
   799  00E3  3000               	movlw	0
   800  00E4                     u43_20:
   801  00E4  00F8               	movwf	??_Count_Up
   802  00E5  0878               	movf	??_Count_Up,w
   803  00E6  00FD               	movwf	_bLed
   804                           
   805                           ;Led_7seg.c: 125:       if(bLed)
   806  00E7  087D               	movf	_bLed,w
   807  00E8  1903               	btfsc	3,2
   808  00E9  28EC               	goto	i1l86
   809                           
   810                           ;Led_7seg.c: 126:           PORTEbits.RE2=1;
   811  00EA  1509               	bsf	9,2	;volatile
   812  00EB  28ED               	goto	i1l88
   813  00EC                     i1l86:	
   814                           ;Led_7seg.c: 127:       else
   815                           
   816                           
   817                           ;Led_7seg.c: 128:           PORTEbits.RE2=0;
   818  00EC  1109               	bcf	9,2	;volatile
   819  00ED                     i1l88:
   820  00ED  087B               	movf	??_Count_Up+3,w
   821  00EE  008A               	movwf	10
   822  00EF  087A               	movf	??_Count_Up+2,w
   823  00F0  0084               	movwf	4
   824  00F1  0E79               	swapf	??_Count_Up+1,w
   825  00F2  0083               	movwf	3
   826  00F3  0EFE               	swapf	126,f
   827  00F4  0E7E               	swapf	126,w
   828  00F5  0009               	retfie
   829  00F6                     __end_of_Count_Up:
   830                           
   831                           	psect	intentry
   832  0004                     __pintentry:	
   833                           ;incstack = 0
   834                           ; Regs used in _Count_Up: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   835                           
   836  0004                     interrupt_function:
   837  007E                     saved_w	set	btemp
   838  0004  00FE               	movwf	btemp
   839  0005  0E03               	swapf	3,w
   840  0006  00F9               	movwf	??_Count_Up+1
   841  0007  0804               	movf	4,w
   842  0008  00FA               	movwf	??_Count_Up+2
   843  0009  080A               	movf	10,w
   844  000A  00FB               	movwf	??_Count_Up+3
   845  000B  120A  118A  282B   	ljmp	_Count_Up
   846                           
   847                           	psect	text3
   848  00F6                     __ptext3:	
   849 ;; *************** function _hienthi *****************
   850 ;; Defined at:
   851 ;;		line 52 in file "Led_7seg.c"
   852 ;; Parameters:    Size  Location     Type
   853 ;;		None
   854 ;; Auto vars:     Size  Location     Type
   855 ;;		None
   856 ;; Return value:  Size  Location     Type
   857 ;;                  1    wreg      void 
   858 ;; Registers used:
   859 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   865 ;;      Params:         0       0       0       0       0
   866 ;;      Locals:         0       0       0       0       0
   867 ;;      Temps:          2       0       0       0       0
   868 ;;      Totals:         2       0       0       0       0
   869 ;;Total ram usage:        2 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; This function calls:
   872 ;;		Nothing
   873 ;; This function is called by:
   874 ;;		_Count_Up
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           
   879                           ;psect for function _hienthi
   880  00F6                     _hienthi:
   881                           
   882                           ;Led_7seg.c: 54:      PORTD=0xff;
   883                           
   884                           ;incstack = 0
   885                           ; Regs used in _hienthi: [wreg-fsr0h+status,2+status,0]
   886  00F6  30FF               	movlw	255
   887  00F7  1283               	bcf	3,5	;RP0=0, select bank0
   888  00F8  1303               	bcf	3,6	;RP1=0, select bank0
   889  00F9  0088               	movwf	8	;volatile
   890                           
   891                           ;Led_7seg.c: 55:     switch (digit)
   892  00FA  2927               	goto	i1l797
   893  00FB                     i1l68:	
   894                           ;Led_7seg.c: 56:     {;Led_7seg.c: 57:        case 0:
   895                           
   896                           
   897                           ;Led_7seg.c: 59:         PORTCbits.RC7=1;PORTCbits.RC4=0;PORTCbits.RC5=1;PORTCbits.RC6=1
      +                          ;
   898  00FB  1787               	bsf	7,7	;volatile
   899  00FC  1207               	bcf	7,4	;volatile
   900  00FD  1687               	bsf	7,5	;volatile
   901  00FE  1707               	bsf	7,6	;volatile
   902                           
   903                           ;Led_7seg.c: 60:           PORTD=number[ngin];
   904  00FF  0830               	movf	_ngin,w
   905  0100  3E34               	addlw	(low (_number| 0))& (0+255)
   906  0101  0084               	movwf	4
   907  0102  1383               	bcf	3,7	;select IRP bank0
   908  0103  0800               	movf	0,w
   909  0104  0088               	movwf	8	;volatile
   910                           
   911                           ;Led_7seg.c: 61:           break;
   912  0105  0008               	return
   913  0106                     i1l70:	
   914                           ;Led_7seg.c: 62:         case 1:
   915                           
   916                           
   917                           ;Led_7seg.c: 64:          PORTCbits.RC4=1;PORTCbits.RC5=0;PORTCbits.RC6=1;PORTCbits.RC7=
      +                          1;
   918  0106  1607               	bsf	7,4	;volatile
   919  0107  1287               	bcf	7,5	;volatile
   920  0108  1707               	bsf	7,6	;volatile
   921  0109  1787               	bsf	7,7	;volatile
   922                           
   923                           ;Led_7seg.c: 65:          PORTD=number[tram];
   924  010A  0831               	movf	_tram,w
   925  010B  3E34               	addlw	(low (_number| 0))& (0+255)
   926  010C  0084               	movwf	4
   927  010D  1383               	bcf	3,7	;select IRP bank0
   928  010E  0800               	movf	0,w
   929  010F  0088               	movwf	8	;volatile
   930                           
   931                           ;Led_7seg.c: 66:           break;
   932  0110  0008               	return
   933  0111                     i1l71:	
   934                           ;Led_7seg.c: 67:         case 2:
   935                           
   936                           
   937                           ;Led_7seg.c: 69:          PORTCbits.RC4=1;PORTCbits.RC5=1;PORTCbits.RC6=0;PORTCbits.RC7=
      +                          1;
   938  0111  1607               	bsf	7,4	;volatile
   939  0112  1687               	bsf	7,5	;volatile
   940  0113  1307               	bcf	7,6	;volatile
   941  0114  1787               	bsf	7,7	;volatile
   942                           
   943                           ;Led_7seg.c: 70:          PORTD=number[truc];
   944  0115  0832               	movf	_truc,w
   945  0116  3E34               	addlw	(low (_number| 0))& (0+255)
   946  0117  0084               	movwf	4
   947  0118  1383               	bcf	3,7	;select IRP bank0
   948  0119  0800               	movf	0,w
   949  011A  0088               	movwf	8	;volatile
   950                           
   951                           ;Led_7seg.c: 71:           break;
   952  011B  0008               	return
   953  011C                     i1l72:	
   954                           ;Led_7seg.c: 72:           case 3:
   955                           
   956                           
   957                           ;Led_7seg.c: 74:          PORTCbits.RC4=1;PORTCbits.RC5=1;PORTCbits.RC6=1;PORTCbits.RC7=
      +                          0;
   958  011C  1607               	bsf	7,4	;volatile
   959  011D  1687               	bsf	7,5	;volatile
   960  011E  1707               	bsf	7,6	;volatile
   961  011F  1387               	bcf	7,7	;volatile
   962                           
   963                           ;Led_7seg.c: 75:          PORTD=number[donvi];
   964  0120  0833               	movf	_donvi,w
   965  0121  3E34               	addlw	(low (_number| 0))& (0+255)
   966  0122  0084               	movwf	4
   967  0123  1383               	bcf	3,7	;select IRP bank0
   968  0124  0800               	movf	0,w
   969  0125  0088               	movwf	8	;volatile
   970                           
   971                           ;Led_7seg.c: 76:     }
   972  0126  0008               	return
   973  0127                     i1l797:
   974  0127  087C               	movf	_digit,w
   975  0128  00F0               	movwf	??_hienthi
   976  0129  01F1               	clrf	??_hienthi+1
   977                           
   978                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   979                           ; Switch size 1, requested type "simple"
   980                           ; Number of cases is 1, Range of values is 0 to 0
   981                           ; switch strategies available:
   982                           ; Name         Instructions Cycles
   983                           ; simple_byte            4     3 (average)
   984                           ; direct_byte           11     8 (fixed)
   985                           ; jumptable            260     6 (fixed)
   986                           ;	Chosen strategy is simple_byte
   987  012A  0871               	movf	??_hienthi+1,w
   988  012B  3A00               	xorlw	0	; case 0
   989  012C  1903               	skipnz
   990  012D  292F               	goto	i1l947
   991  012E  293D               	goto	i1l73
   992  012F                     i1l947:
   993                           
   994                           ; Switch size 1, requested type "simple"
   995                           ; Number of cases is 4, Range of values is 0 to 3
   996                           ; switch strategies available:
   997                           ; Name         Instructions Cycles
   998                           ; simple_byte           13     7 (average)
   999                           ; direct_byte           20     8 (fixed)
  1000                           ; jumptable            260     6 (fixed)
  1001                           ;	Chosen strategy is simple_byte
  1002  012F  0870               	movf	??_hienthi,w
  1003  0130  3A00               	xorlw	0	; case 0
  1004  0131  1903               	skipnz
  1005  0132  28FB               	goto	i1l68
  1006  0133  3A01               	xorlw	1	; case 1
  1007  0134  1903               	skipnz
  1008  0135  2906               	goto	i1l70
  1009  0136  3A03               	xorlw	3	; case 2
  1010  0137  1903               	skipnz
  1011  0138  2911               	goto	i1l71
  1012  0139  3A01               	xorlw	1	; case 3
  1013  013A  1903               	skipnz
  1014  013B  291C               	goto	i1l72
  1015  013C  293D               	goto	i1l73
  1016  013D                     i1l73:
  1017  013D  0008               	return
  1018  013E                     __end_of_hienthi:
  1019                           
  1020                           	psect	text4
  1021  017A                     __ptext4:	
  1022 ;; *************** function ___lwmod *****************
  1023 ;; Defined at:
  1024 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwmod.c"
  1025 ;; Parameters:    Size  Location     Type
  1026 ;;  divisor         2    0[COMMON] unsigned int 
  1027 ;;  dividend        2    2[COMMON] unsigned int 
  1028 ;; Auto vars:     Size  Location     Type
  1029 ;;  counter         1    5[COMMON] unsigned char 
  1030 ;; Return value:  Size  Location     Type
  1031 ;;                  2    0[COMMON] unsigned int 
  1032 ;; Registers used:
  1033 ;;		wreg, status,2, status,0
  1034 ;; Tracked objects:
  1035 ;;		On entry : 0/0
  1036 ;;		On exit  : 0/0
  1037 ;;		Unchanged: 0/0
  1038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1039 ;;      Params:         4       0       0       0       0
  1040 ;;      Locals:         1       0       0       0       0
  1041 ;;      Temps:          1       0       0       0       0
  1042 ;;      Totals:         6       0       0       0       0
  1043 ;;Total ram usage:        6 bytes
  1044 ;; Hardware stack levels used:    1
  1045 ;; This function calls:
  1046 ;;		Nothing
  1047 ;; This function is called by:
  1048 ;;		_Count_Up
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052                           
  1053                           ;psect for function ___lwmod
  1054  017A                     ___lwmod:
  1055                           
  1056                           ;incstack = 0
  1057                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1058  017A  0870               	movf	___lwmod@divisor,w
  1059  017B  0471               	iorwf	___lwmod@divisor+1,w
  1060  017C  1903               	btfsc	3,2
  1061  017D  29A7               	goto	i1l867
  1062  017E  01F5               	clrf	___lwmod@counter
  1063  017F  0AF5               	incf	___lwmod@counter,f
  1064  0180                     i1l857:
  1065  0180  1BF1               	btfsc	___lwmod@divisor+1,7
  1066  0181  298E               	goto	i1l859
  1067  0182  3001               	movlw	1
  1068  0183                     u31_25:
  1069  0183  1003               	clrc
  1070  0184  0DF0               	rlf	___lwmod@divisor,f
  1071  0185  0DF1               	rlf	___lwmod@divisor+1,f
  1072  0186  3EFF               	addlw	-1
  1073  0187  1D03               	skipz
  1074  0188  2983               	goto	u31_25
  1075  0189  3001               	movlw	1
  1076  018A  00F4               	movwf	??___lwmod
  1077  018B  0874               	movf	??___lwmod,w
  1078  018C  07F5               	addwf	___lwmod@counter,f
  1079  018D  2980               	goto	i1l857
  1080  018E                     i1l859:
  1081  018E  0871               	movf	___lwmod@divisor+1,w
  1082  018F  0273               	subwf	___lwmod@dividend+1,w
  1083  0190  1D03               	skipz
  1084  0191  2994               	goto	u33_25
  1085  0192  0870               	movf	___lwmod@divisor,w
  1086  0193  0272               	subwf	___lwmod@dividend,w
  1087  0194                     u33_25:
  1088  0194  1C03               	skipc
  1089  0195  299C               	goto	i1l863
  1090  0196  0870               	movf	___lwmod@divisor,w
  1091  0197  02F2               	subwf	___lwmod@dividend,f
  1092  0198  0871               	movf	___lwmod@divisor+1,w
  1093  0199  1C03               	skipc
  1094  019A  03F3               	decf	___lwmod@dividend+1,f
  1095  019B  02F3               	subwf	___lwmod@dividend+1,f
  1096  019C                     i1l863:
  1097  019C  3001               	movlw	1
  1098  019D                     u34_25:
  1099  019D  1003               	clrc
  1100  019E  0CF1               	rrf	___lwmod@divisor+1,f
  1101  019F  0CF0               	rrf	___lwmod@divisor,f
  1102  01A0  3EFF               	addlw	-1
  1103  01A1  1D03               	skipz
  1104  01A2  299D               	goto	u34_25
  1105  01A3  3001               	movlw	1
  1106  01A4  02F5               	subwf	___lwmod@counter,f
  1107  01A5  1D03               	btfss	3,2
  1108  01A6  298E               	goto	i1l859
  1109  01A7                     i1l867:
  1110  01A7  0873               	movf	___lwmod@dividend+1,w
  1111  01A8  00F1               	movwf	?___lwmod+1
  1112  01A9  0872               	movf	___lwmod@dividend,w
  1113  01AA  00F0               	movwf	?___lwmod
  1114  01AB  0008               	return
  1115  01AC                     __end_of___lwmod:
  1116                           
  1117                           	psect	text5
  1118  013E                     __ptext5:	
  1119 ;; *************** function ___lwdiv *****************
  1120 ;; Defined at:
  1121 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.30\pic\sources\c90\common\lwdiv.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;  divisor         2    0[COMMON] unsigned int 
  1124 ;;  dividend        2    2[COMMON] unsigned int 
  1125 ;; Auto vars:     Size  Location     Type
  1126 ;;  quotient        2    5[COMMON] unsigned int 
  1127 ;;  counter         1    7[COMMON] unsigned char 
  1128 ;; Return value:  Size  Location     Type
  1129 ;;                  2    0[COMMON] unsigned int 
  1130 ;; Registers used:
  1131 ;;		wreg, status,2, status,0
  1132 ;; Tracked objects:
  1133 ;;		On entry : 0/0
  1134 ;;		On exit  : 0/0
  1135 ;;		Unchanged: 0/0
  1136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1137 ;;      Params:         4       0       0       0       0
  1138 ;;      Locals:         3       0       0       0       0
  1139 ;;      Temps:          1       0       0       0       0
  1140 ;;      Totals:         8       0       0       0       0
  1141 ;;Total ram usage:        8 bytes
  1142 ;; Hardware stack levels used:    1
  1143 ;; This function calls:
  1144 ;;		Nothing
  1145 ;; This function is called by:
  1146 ;;		_Count_Up
  1147 ;; This function uses a non-reentrant model
  1148 ;;
  1149                           
  1150                           
  1151                           ;psect for function ___lwdiv
  1152  013E                     ___lwdiv:
  1153                           
  1154                           ;incstack = 0
  1155                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1156  013E  01F5               	clrf	___lwdiv@quotient
  1157  013F  01F6               	clrf	___lwdiv@quotient+1
  1158  0140  0870               	movf	___lwdiv@divisor,w
  1159  0141  0471               	iorwf	___lwdiv@divisor+1,w
  1160  0142  1903               	btfsc	3,2
  1161  0143  2975               	goto	i1l845
  1162  0144  01F7               	clrf	___lwdiv@counter
  1163  0145  0AF7               	incf	___lwdiv@counter,f
  1164  0146                     i1l833:
  1165  0146  1BF1               	btfsc	___lwdiv@divisor+1,7
  1166  0147  2954               	goto	i1l835
  1167  0148  3001               	movlw	1
  1168  0149                     u24_25:
  1169  0149  1003               	clrc
  1170  014A  0DF0               	rlf	___lwdiv@divisor,f
  1171  014B  0DF1               	rlf	___lwdiv@divisor+1,f
  1172  014C  3EFF               	addlw	-1
  1173  014D  1D03               	skipz
  1174  014E  2949               	goto	u24_25
  1175  014F  3001               	movlw	1
  1176  0150  00F4               	movwf	??___lwdiv
  1177  0151  0874               	movf	??___lwdiv,w
  1178  0152  07F7               	addwf	___lwdiv@counter,f
  1179  0153  2946               	goto	i1l833
  1180  0154                     i1l835:
  1181  0154  3001               	movlw	1
  1182  0155                     u26_25:
  1183  0155  1003               	clrc
  1184  0156  0DF5               	rlf	___lwdiv@quotient,f
  1185  0157  0DF6               	rlf	___lwdiv@quotient+1,f
  1186  0158  3EFF               	addlw	-1
  1187  0159  1D03               	skipz
  1188  015A  2955               	goto	u26_25
  1189  015B  0871               	movf	___lwdiv@divisor+1,w
  1190  015C  0273               	subwf	___lwdiv@dividend+1,w
  1191  015D  1D03               	skipz
  1192  015E  2961               	goto	u27_25
  1193  015F  0870               	movf	___lwdiv@divisor,w
  1194  0160  0272               	subwf	___lwdiv@dividend,w
  1195  0161                     u27_25:
  1196  0161  1C03               	skipc
  1197  0162  296A               	goto	i1l841
  1198  0163  0870               	movf	___lwdiv@divisor,w
  1199  0164  02F2               	subwf	___lwdiv@dividend,f
  1200  0165  0871               	movf	___lwdiv@divisor+1,w
  1201  0166  1C03               	skipc
  1202  0167  03F3               	decf	___lwdiv@dividend+1,f
  1203  0168  02F3               	subwf	___lwdiv@dividend+1,f
  1204  0169  1475               	bsf	___lwdiv@quotient,0
  1205  016A                     i1l841:
  1206  016A  3001               	movlw	1
  1207  016B                     u28_25:
  1208  016B  1003               	clrc
  1209  016C  0CF1               	rrf	___lwdiv@divisor+1,f
  1210  016D  0CF0               	rrf	___lwdiv@divisor,f
  1211  016E  3EFF               	addlw	-1
  1212  016F  1D03               	skipz
  1213  0170  296B               	goto	u28_25
  1214  0171  3001               	movlw	1
  1215  0172  02F7               	subwf	___lwdiv@counter,f
  1216  0173  1D03               	btfss	3,2
  1217  0174  2954               	goto	i1l835
  1218  0175                     i1l845:
  1219  0175  0876               	movf	___lwdiv@quotient+1,w
  1220  0176  00F1               	movwf	?___lwdiv+1
  1221  0177  0875               	movf	___lwdiv@quotient,w
  1222  0178  00F0               	movwf	?___lwdiv
  1223  0179  0008               	return
  1224  017A                     __end_of___lwdiv:
  1225  007E                     btemp	set	126	;btemp
  1226  007E                     wtemp0	set	126
  1227                           
  1228                           	psect	config
  1229                           
  1230                           ;Config register CONFIG @ 0x2007
  1231                           ;	Oscillator Selection bits
  1232                           ;	FOSC = XT, XT oscillator
  1233                           ;	Watchdog Timer Enable bit
  1234                           ;	WDTE = OFF, WDT disabled
  1235                           ;	Power-up Timer Enable bit
  1236                           ;	PWRTE = ON, PWRT enabled
  1237                           ;	Brown-out Reset Enable bit
  1238                           ;	BOREN = ON, BOR enabled
  1239                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1240                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  1241                           ;	Data EEPROM Memory Code Protection bit
  1242                           ;	CPD = OFF, Data EEPROM code protection off
  1243                           ;	Flash Program Memory Write Enable bits
  1244                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1245                           ;	In-Circuit Debugger Mode bit
  1246                           ;	DEBUG = 0x1, unprogrammed default
  1247                           ;	Flash Program Memory Code Protection bit
  1248                           ;	CP = OFF, Code protection off
  1249  2007                     	org	8199
  1250  2007  3FF1               	dw	16369

Data Sizes:
    Strings     0
    Constant    0
    Data        10
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80      0      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _Count_Up in COMMON

    _Count_Up->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _Count_Up in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Count_Up in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Count_Up in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Count_Up in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                  _timer2_initialize
 ---------------------------------------------------------------------------------
 (1) _timer2_initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Count_Up                                             4     4      0     957
                                              8 COMMON     4     4      0
                            ___lwdiv
                            ___lwmod
                            _hienthi
 ---------------------------------------------------------------------------------
 (3) _hienthi                                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     477
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     480
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _timer2_initialize

 _Count_Up (ROOT)
   ___lwdiv
   ___lwmod
   _hienthi

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2C      12        0.0%
ABS                  0      0      2C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.30 build 20200825195618 
Symbol Table                                                                                   Tue Sep 08 17:46:58 2020

                         _i 002E                           _j 002A                           _k 0020  
                         pc 0002                          l93 01D2                          fsr 0004  
                       _GIE 005F                         _PR2 0092                         _num 002C  
                       fsr0 0004                         indf 0000                        _PEIE 005E  
                      i1l70 0106                        i1l71 0111                        i1l72 011C  
                      i1l73 013D                        i1l68 00FB                        i1l86 00EC  
                      i1l88 00ED                        _bLed 007D                        _main 01C1  
                      _ngin 0030                        _tram 0031                        btemp 007E  
                      _truc 0032                        start 000E                       ?_main 0070  
           __end_of___lwdiv 017A             __end_of___lwmod 01AC                       i1l903 006C  
                     i1l841 016A                       i1l833 0146                       i1l835 0154  
                     i1l915 00DE                       i1l845 0175                       i1l863 019C  
                     i1l857 0180                       i1l859 018E                       i1l867 01A7  
                     i1l947 012F                       i1l797 0127                       u31_25 0183  
                     u24_25 0149                       u33_25 0194                       u42_20 00E3  
                     u26_25 0155                       u34_25 019D                       u43_20 00E4  
                     _PORTD 0008                       u27_25 0161                       u28_25 016B  
                     _TRISD 0088             __end_of_hienthi 013E                       _delay 0028  
                     _digit 007C                       _donvi 0033                       _count 0026  
                     pclath 000A                       status 0003                       wtemp0 007E  
           __initialization 0011                __end_of_main 01D3            __end_of_Count_Up 00F6  
                    ??_main 0000                      _TMR2IE 0461                      _TMR2IF 0061  
                    _TMR2ON 0092                   ??___lwdiv 0074                   ??___lwmod 0074  
                    _number 0034                   ??_hienthi 0070                      saved_w 007E  
   __end_of__initialization 0027              __pcstackCOMMON 0070                __pidataBANK0 01E4  
                __pbssBANK0 0020                   ?_Count_Up 0070                  __pmaintext 01C1  
                __pintentry 0004                     _T2CKPS0 0090                     _T2CKPS1 0091  
                   _TOUTPS0 0093                     _TOUTPS1 0094                     _TOUTPS2 0095  
                ??_Count_Up 0078                     ___lwdiv 013E                     ___lwmod 017A  
         _timer2_initialize 01AC                     __ptext1 01AC                     __ptext2 002B  
                   __ptext3 00F6                     __ptext4 017A                     __ptext5 013E  
        ?_timer2_initialize 0070                     _hienthi 00F6                     _count_s 0024  
       ??_timer2_initialize 0000                     clrloop0 01EF        end_of_initialization 0027  
 __end_of_timer2_initialize 01C1                   _PORTCbits 0007                   _PORTEbits 0009  
                 _TRISAbits 0085                   _TRISCbits 0087                   _TRISEbits 0089  
       start_initialization 0011           __size_of_Count_Up 00CB  __size_of_timer2_initialize 0015  
                init_fetch0 01D3                 __pdataBANK0 0034                 __pbssCOMMON 007C  
                 ___latbits 0002               __pcstackBANK0 0000            ___lwdiv@dividend 0072  
                  ?___lwdiv 0070                    ?___lwmod 0070                    ?_hienthi 0070  
          ___lwdiv@quotient 0075           interrupt_function 0004                   clear_ram0 01EE  
                  _Count_Up 002B            __size_of___lwdiv 003C            __size_of___lwmod 0032  
          __size_of_hienthi 0048             ___lwdiv@divisor 0070             ___lwdiv@counter 0077  
             __size_of_main 0012                    init_ram0 01D7                    intlevel1 0000  
          ___lwmod@dividend 0072             ___lwmod@divisor 0070             ___lwmod@counter 0075  
